\begin{Verbatim}[commandchars=\\\{\},codes={\catcode`\$=3\catcode`\^=7\catcode`\_=8}]
\PYG{c+c1}{\PYGZsh{}import useful libraries}
\PYG{k+kn}{import} \PYG{n+nn}{numpy} \PYG{k+kn}{as} \PYG{n+nn}{np}

\PYG{k}{def} \PYG{n+nf}{ica}\PYG{p}{(} \PYG{n}{D} \PYG{p}{,} \PYG{n}{eps} \PYG{o}{=} \PYG{l+m+mf}{1e\PYGZhy{}6}\PYG{p}{,} \PYG{n}{random\PYGZus{}seed} \PYG{o}{=} \PYG{l+m+mi}{17}\PYG{p}{):}
    \PYG{c+c1}{\PYGZsh{} Author: C. Howard}
    \PYG{c+c1}{\PYGZsh{} method to perform ICA using FastICA on some input data to create a set}
    \PYG{c+c1}{\PYGZsh{} of independent features}
    \PYG{c+c1}{\PYGZsh{}}
    \PYG{c+c1}{\PYGZsh{} Inputs:}
    \PYG{c+c1}{\PYGZsh{}   D           : Dataset where columns represent samples and}
    \PYG{c+c1}{\PYGZsh{}                 rows are number of dimensions}
    \PYG{c+c1}{\PYGZsh{}   eps         : the epsilon used to denote when the algorithm has converged}
    \PYG{c+c1}{\PYGZsh{}   random\PYGZus{}seed : seed to use to make algorithm repeatable}
    \PYG{c+c1}{\PYGZsh{}}
    \PYG{c+c1}{\PYGZsh{} Outputs:}
    \PYG{c+c1}{\PYGZsh{}   W   : Mixing Matrix}
    \PYG{c+c1}{\PYGZsh{}   Winv: Inverse of Mixing Matrix}
    \PYG{c+c1}{\PYGZsh{}}
    \PYG{c+c1}{\PYGZsh{} Code based on https://en.wikipedia.org/wiki/FastICA and comments made in}
    \PYG{c+c1}{\PYGZsh{} Machine Learning a Probabilistic Perspective by Kevin P. Murphy}

    \PYG{c+c1}{\PYGZsh{} initialize random seed for repeatability}
    \PYG{n}{np}\PYG{o}{.}\PYG{n}{random}\PYG{o}{.}\PYG{n}{seed}\PYG{p}{(}\PYG{n}{seed}\PYG{o}{=}\PYG{n}{random\PYGZus{}seed}\PYG{p}{)}

    \PYG{c+c1}{\PYGZsh{} define the g(u) and g\PYGZsq{}(u) that will be used}
    \PYG{k}{def} \PYG{n+nf}{g\PYGZus{}gderiv}\PYG{p}{(}\PYG{n}{u}\PYG{p}{):}
        \PYG{n}{c} \PYG{o}{=} \PYG{n}{np}\PYG{o}{.}\PYG{n}{tanh}\PYG{p}{(}\PYG{n}{u}\PYG{p}{)}
        \PYG{k}{return} \PYG{p}{(}\PYG{n}{c}\PYG{p}{,} \PYG{l+m+mi}{1} \PYG{o}{\PYGZhy{}} \PYG{n}{c}\PYG{o}{**}\PYG{l+m+mi}{2}\PYG{p}{)}

    \PYG{c+c1}{\PYGZsh{} get number of components that will be used}
    \PYG{p}{(}\PYG{n}{N}\PYG{p}{,}\PYG{n}{M}\PYG{p}{)} \PYG{o}{=} \PYG{n}{D}\PYG{o}{.}\PYG{n}{shape}
    \PYG{n}{ncomp} \PYG{o}{=} \PYG{n}{N}

    \PYG{c+c1}{\PYGZsh{} define output matrix W}
    \PYG{n}{W} \PYG{o}{=} \PYG{n}{np}\PYG{o}{.}\PYG{n}{random}\PYG{o}{.}\PYG{n}{randn}\PYG{p}{(}\PYG{n}{D}\PYG{o}{.}\PYG{n}{shape}\PYG{p}{[}\PYG{l+m+mi}{0}\PYG{p}{],}\PYG{n}{ncomp}\PYG{p}{)}

    \PYG{c+c1}{\PYGZsh{} define some helper entities}
    \PYG{n}{One} \PYG{o}{=} \PYG{n}{np}\PYG{o}{.}\PYG{n}{ones}\PYG{p}{((}\PYG{n}{M}\PYG{p}{,}\PYG{l+m+mi}{1}\PYG{p}{))}

    \PYG{c+c1}{\PYGZsh{} compute the components}
    \PYG{k}{for} \PYG{n}{p} \PYG{o+ow}{in} \PYG{n+nb}{range}\PYG{p}{(}\PYG{l+m+mi}{0}\PYG{p}{,}\PYG{n}{ncomp}\PYG{p}{):}

        \PYG{c+c1}{\PYGZsh{} set difference between w vectors to arbitrary number above threshold}
        \PYG{n}{dw} \PYG{o}{=} \PYG{l+m+mi}{10}\PYG{o}{*}\PYG{n}{eps}

        \PYG{k}{while} \PYG{n}{dw} \PYG{o}{\PYGZgt{}} \PYG{n}{eps}\PYG{p}{:}

            \PYG{c+c1}{\PYGZsh{} get current value for vector w}
            \PYG{n}{w0} \PYG{o}{=} \PYG{n}{np}\PYG{o}{.}\PYG{n}{copy}\PYG{p}{(}\PYG{n}{W}\PYG{p}{[:,}\PYG{n}{p}\PYG{p}{])}

            \PYG{c+c1}{\PYGZsh{} compute source signal}
            \PYG{n}{z} \PYG{o}{=} \PYG{n}{np}\PYG{o}{.}\PYG{n}{matmul}\PYG{p}{(}\PYG{n}{W}\PYG{p}{[:,}\PYG{n}{p}\PYG{p}{]}\PYG{o}{.}\PYG{n}{T}\PYG{p}{,}\PYG{n}{D}\PYG{p}{)}

            \PYG{c+c1}{\PYGZsh{} compute g and g\PYGZsq{} given z}
            \PYG{p}{(}\PYG{n}{g}\PYG{p}{,}\PYG{n}{gd}\PYG{p}{)} \PYG{o}{=} \PYG{n}{g\PYGZus{}gderiv}\PYG{p}{(}\PYG{n}{z}\PYG{p}{)}

            \PYG{c+c1}{\PYGZsh{} set the new value for the vector w}
            \PYG{n}{W}\PYG{p}{[:,}\PYG{n}{p}\PYG{p}{]} \PYG{o}{=} \PYG{p}{(}\PYG{n}{np}\PYG{o}{.}\PYG{n}{matmul}\PYG{p}{(}\PYG{n}{D}\PYG{p}{,}\PYG{n}{g}\PYG{o}{.}\PYG{n}{T}\PYG{p}{)} \PYG{o}{\PYGZhy{}} \PYG{n}{np}\PYG{o}{.}\PYG{n}{matmul}\PYG{p}{(}\PYG{n}{gd}\PYG{p}{,}\PYG{n}{One}\PYG{p}{)}\PYG{o}{*}\PYG{n}{W}\PYG{p}{[:,}\PYG{n}{p}\PYG{p}{])}\PYG{o}{/}\PYG{n}{M}

            \PYG{c+c1}{\PYGZsh{} orthogonalize relative to the past w components}
            \PYG{k}{if} \PYG{n}{p} \PYG{o}{\PYGZgt{}} \PYG{l+m+mi}{0}\PYG{p}{:}
                \PYG{n}{W}\PYG{p}{[:,}\PYG{n}{p}\PYG{p}{]} \PYG{o}{=} \PYG{n}{W}\PYG{p}{[:,}\PYG{n}{p}\PYG{p}{]} \PYG{o}{\PYGZhy{}} \PYG{n}{np}\PYG{o}{.}\PYG{n}{matmul}\PYG{p}{(} \PYG{n}{W}\PYG{p}{[:,:}\PYG{n}{p}\PYG{p}{],} \PYG{p}{(}\PYG{n}{np}\PYG{o}{.}\PYG{n}{matmul}\PYG{p}{(}\PYG{n}{W}\PYG{p}{[:,}\PYG{n}{p}\PYG{p}{]}\PYG{o}{.}\PYG{n}{T}\PYG{p}{,}\PYG{n}{W}\PYG{p}{[:,:}\PYG{n}{p}\PYG{p}{]))} \PYG{p}{)}

            \PYG{c+c1}{\PYGZsh{} normalize to keep on constraint surface}
            \PYG{n}{w1}      \PYG{o}{=} \PYG{n}{W}\PYG{p}{[:,}\PYG{n}{p}\PYG{p}{]}
            \PYG{n}{W}\PYG{p}{[:,}\PYG{n}{p}\PYG{p}{]}  \PYG{o}{=} \PYG{n}{W}\PYG{p}{[:,}\PYG{n}{p}\PYG{p}{]}\PYG{o}{/}\PYG{n}{np}\PYG{o}{.}\PYG{n}{sqrt}\PYG{p}{(}\PYG{n}{np}\PYG{o}{.}\PYG{n}{matmul}\PYG{p}{(}\PYG{n}{W}\PYG{p}{[:,}\PYG{n}{p}\PYG{p}{]}\PYG{o}{.}\PYG{n}{T}\PYG{p}{,}\PYG{n}{W}\PYG{p}{[:,}\PYG{n}{p}\PYG{p}{]))}
            \PYG{n}{w2}      \PYG{o}{=} \PYG{n}{W}\PYG{p}{[:,}\PYG{n}{p}\PYG{p}{]}

            \PYG{c+c1}{\PYGZsh{} compute change in w vector}
            \PYG{n}{dw} \PYG{o}{=} \PYG{n}{np}\PYG{o}{.}\PYG{n}{linalg}\PYG{o}{.}\PYG{n}{norm}\PYG{p}{(}\PYG{n}{w0}\PYG{o}{\PYGZhy{}}\PYG{n}{W}\PYG{p}{[:,}\PYG{n}{p}\PYG{p}{])}

    \PYG{c+c1}{\PYGZsh{} Compute inverse of W}
    \PYG{n}{Winv} \PYG{o}{=} \PYG{n}{W}\PYG{o}{.}\PYG{n}{T}

    \PYG{c+c1}{\PYGZsh{} return W and inverse of W}
    \PYG{k}{return} \PYG{p}{(}\PYG{n}{W}\PYG{p}{,}\PYG{n}{Winv}\PYG{p}{)}
\end{Verbatim}
